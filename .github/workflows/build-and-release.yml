name: Build and Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

jobs:
  build-web:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build web application
      run: npm run build
      
    - name: Upload web build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: dist/
        retention-days: 30

  build-electron:
    runs-on: windows-latest
    needs: build-web
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build web assets first
      run: npm run build:electron
      
    - name: Build Electron application
      run: npm run dist
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Electron build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-build
        path: |
          dist-electron/*.exe
          dist-electron/latest*.yml
        retention-days: 30

  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test --if-present
      
    - name: Run linting
      run: npm run lint --if-present

  release:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
    runs-on: ubuntu-latest
    needs: [build-web, build-electron, test]
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Bump version
      id: version
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Custom version increment logic for better control
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case "${{ github.event.inputs.release_type }}" in
          "patch")
            PATCH=$((PATCH + 1))
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        
        # Update package.json with new version
        node -e "
          const pkg = require('./package.json');
          pkg.version = '$NEW_VERSION';
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
        "
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=v$NEW_VERSION" >> $GITHUB_OUTPUT
        
        echo "Version bumped from $CURRENT_VERSION to $NEW_VERSION"
        
    - name: Update package.json and commit
      run: |
        git add package.json package-lock.json
        git commit -m "chore: bump version to v${{ steps.version.outputs.new_version }}"
        git push origin main
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy web build
        if [ -d "artifacts/web-build" ]; then
          cd artifacts/web-build
          zip -r ../../release-assets/new-world-crafting-calculator-web-v${{ steps.version.outputs.new_version }}.zip .
          cd ../..
        fi
        
        # Copy Electron executable
        if [ -d "artifacts/electron-build" ]; then
          find artifacts/electron-build -name "*.exe" -exec cp {} release-assets/ \;
          
          # Rename the exe to standardize version format (remove duplicate versions)
          for file in release-assets/*.exe; do
            if [ -f "$file" ]; then
              # Extract just the base name and add clean version
              basename=$(basename "$file" .exe)
              # Remove any existing version numbers (pattern: space + numbers + dots)
              cleanname=$(echo "$basename" | sed 's/ [0-9]\+\.[0-9]\+\.[0-9]\+//')
              newname="release-assets/${cleanname} v${{ steps.version.outputs.new_version }}.exe"
              mv "$file" "$newname"
            fi
          done
        fi
        
        ls -la release-assets/
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "## 🚀 What's New in v${{ steps.version.outputs.new_version }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### ✨ Features & Improvements" >> CHANGELOG.md
        
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          git log $LAST_TAG..HEAD --pretty=format:"- %s" --grep="feat:" --grep="add:" --grep="implement:" >> CHANGELOG.md || true
        else
          echo "- Initial release with comprehensive crafting calculator" >> CHANGELOG.md
          echo "- OCR inventory detection with Tesseract.js" >> CHANGELOG.md
          echo "- Desktop application with global hotkeys" >> CHANGELOG.md
          echo "- AppData configuration management" >> CHANGELOG.md
          echo "- Interactive crafting tree visualization" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "### 🐛 Bug Fixes" >> CHANGELOG.md
        if [ -n "$LAST_TAG" ]; then
          git log $LAST_TAG..HEAD --pretty=format:"- %s" --grep="fix:" --grep="bugfix:" >> CHANGELOG.md || true
        fi
        
        echo "" >> CHANGELOG.md
        echo "### 📦 Downloads" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- **🖥️ Desktop App**: \`New World Crafting Calculator v${{ steps.version.outputs.new_version }}.exe\` (Windows)" >> CHANGELOG.md
        echo "- **🌐 Web App**: \`new-world-crafting-calculator-web-v${{ steps.version.outputs.new_version }}.zip\`" >> CHANGELOG.md
        echo "- **📖 Live Demo**: [Try it online](https://involvex.github.io/newworld-dailycraft-calc/)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 🛠️ Technical Details" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- React $(node -p "require('./package.json').dependencies.react")" >> CHANGELOG.md
        echo "- TypeScript $(node -p "require('./package.json').devDependencies.typescript")" >> CHANGELOG.md
        echo "- Electron $(node -p "require('./package.json').devDependencies.electron")" >> CHANGELOG.md
        echo "- Vite $(node -p "require('./package.json').devDependencies.vite")" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "---" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "**Full Changelog**: https://github.com/involvex/newworld-dailycraft-calc/compare/$LAST_TAG...v${{ steps.version.outputs.new_version }}" >> CHANGELOG.md
        
        # Set output for release body
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Git tag
      run: |
        git tag v${{ steps.version.outputs.new_version }}
        git push origin v${{ steps.version.outputs.new_version }}
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.new_version }}
        name: "New World Crafting Calculator v${{ steps.version.outputs.new_version }}"
        body: ${{ steps.changelog.outputs.changelog }}
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-docs:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build-web, test]
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for GitHub Pages
      run: npm run build:pages
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notify:
    if: always()
    runs-on: ubuntu-latest
    needs: [build-web, build-electron, test]
    
    steps:
    - name: Notify build status
      run: |
        if [ "${{ needs.build-web.result }}" == "success" ] && [ "${{ needs.build-electron.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ All builds completed successfully!"
        else
          echo "❌ Some builds failed. Check the logs for details."
          exit 1
        fi
