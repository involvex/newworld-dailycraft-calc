name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.5.1)'
        required: true
        type: string
      tag_name:
        description: 'Tag name (e.g., v1.5.1)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string

jobs:
  create-release:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Get version info
      id: version
      run: |
        if ("${{ github.event.inputs.version }}" -ne "") {
          $VERSION = "${{ github.event.inputs.version }}"
          $TAG_NAME = "${{ github.event.inputs.tag_name }}"
        } else {
          $TAG_NAME = "${{ github.ref_name }}"
          $VERSION = $TAG_NAME -replace '^v', ''
        }
        
        echo "version=$VERSION" >> $env:GITHUB_OUTPUT
        echo "tag_name=$TAG_NAME" >> $env:GITHUB_OUTPUT
        
        Write-Host "Version: $VERSION"
        Write-Host "Tag: $TAG_NAME"
      shell: pwsh
      
    - name: Update version in package.json
      run: |
        $pkg = Get-Content package.json | ConvertFrom-Json
        $pkg.version = "${{ steps.version.outputs.version }}"
        $pkg | ConvertTo-Json -Depth 100 | Set-Content package.json
        
        Write-Host "Updated package.json version to ${{ steps.version.outputs.version }}"
      shell: pwsh
      
    - name: Build production web assets
      run: npm run build:electron:prod
      
    - name: Create code signing certificate
      run: |
        # Create a certificate for release signing
        $certName = "CN=Involvex Release Certificate"
        $password = "release-cert-password-${{ steps.version.outputs.version }}"
        $pfxPath = "release-cert.pfx"
        
        # Create self-signed certificate
        $cert = New-SelfSignedCertificate -Subject $certName -Type CodeSigningCert -KeyUsage DigitalSignature -FriendlyName "Involvex Release Code Signing" -CertStoreLocation Cert:\CurrentUser\My
        
        # Export to PFX file
        $securePassword = ConvertTo-SecureString -String $password -Force -AsPlainText
        Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $securePassword
        
        Write-Host "Release certificate created: $pfxPath"
        
        # Set environment variables for signing
        echo "CSC_LINK=$pfxPath" >> $env:GITHUB_ENV
        echo "CSC_KEY_PASSWORD=$password" >> $env:GITHUB_ENV
      shell: pwsh
      
    - name: Build and sign application
      run: node build-signed.js
      env:
        NODE_ENV: production
        
    - name: Prepare release assets
      run: |
        # The build-signed.js script already organized files in release/release-v{version}
        # Copy them to release-assets for GitHub release upload
        New-Item -ItemType Directory -Force -Path "release-assets"
        
        $releaseDir = "release\release-v${{ steps.version.outputs.version }}"
        if (Test-Path $releaseDir) {
          Write-Host "Found organized release directory: $releaseDir"
          
          # Copy all files from the organized release directory
          Get-ChildItem -Path $releaseDir -File | ForEach-Object {
            Copy-Item $_.FullName "release-assets\"
            $size = [math]::Round($_.Length / 1MB, 2)
            Write-Host "Copied: $($_.Name) ($size MB)"
          }
        } else {
          Write-Host "Organized release directory not found, copying from dist-electron..."
          
          # Fallback: copy from dist-electron
          $setupFile = Get-ChildItem -Path "dist-electron" -Filter "*Setup*.exe" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if ($setupFile) {
            $newName = "New-World-Crafting-Calculator-v${{ steps.version.outputs.version }}-Setup.exe"
            Copy-Item $setupFile.FullName "release-assets\$newName"
            Write-Host "Copied setup file: $newName"
          }
          
          # Copy other important files
          Get-ChildItem -Path "dist-electron" -Filter "*.yml" | ForEach-Object {
            Copy-Item $_.FullName "release-assets\"
            Write-Host "Copied: $($_.Name)"
          }
        }
        
        # List all files in release assets
        Write-Host ""
        Write-Host "Final release assets:"
        Get-ChildItem "release-assets" | ForEach-Object { 
          $size = [math]::Round($_.Length/1MB, 2)
          Write-Host "  üìÑ $($_.Name) ($size MB)" 
        }
      shell: pwsh
      
    - name: Generate release notes
      id: release_notes
      run: |
        $notes = @"
        ## üéÆ New World Crafting Calculator v${{ steps.version.outputs.version }}
        
        ${{ github.event.inputs.release_notes }}
        
        ### üì¶ Downloads
        
        - **üñ•Ô∏è Desktop Installer**: `New-World-Crafting-Calculator-v${{ steps.version.outputs.version }}-Setup.exe`
        - **üíª Portable Version**: `New-World-Crafting-Calculator-v${{ steps.version.outputs.version }}-Portable.exe`
        - **üåê Web Version**: [Try it online](https://involvex.github.io/newworld-dailycraft-calc/)
        
        ### üîê Security & Installation
        
        - ‚úÖ **Code Signed**: All executables are digitally signed for security
        - üõ°Ô∏è **Safe Installation**: Windows Defender and antivirus software may scan the files initially
        - üìã **System Requirements**: Windows 10/11 (64-bit)
        
        ### üõ†Ô∏è Technical Details
        
        - **Framework**: Electron with React & TypeScript
        - **Build Date**: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC")
        - **Architecture**: x64
        - **Code Signing**: Self-signed certificate (test environment)
        
        ### üìñ Usage
        
        1. **Installer**: Run the Setup.exe for a full installation with shortcuts
        2. **Portable**: Run the Portable.exe directly without installation
        3. **Web**: Access the calculator directly in your browser
        
        ---
        
        **Full Changelog**: https://github.com/involvex/newworld-dailycraft-calc/compare/v${{ steps.version.outputs.version }}...main
        "@
        
        # Save to file and output
        $notes | Set-Content "RELEASE_NOTES.md"
        
        # Set multiline output for GitHub Actions
        $delimiter = "EOF_RELEASE_NOTES"
        echo "notes<<$delimiter" >> $env:GITHUB_OUTPUT
        echo $notes >> $env:GITHUB_OUTPUT
        echo $delimiter >> $env:GITHUB_OUTPUT
      shell: pwsh
      
    - name: Create or update Git tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if tag exists
        if (git tag -l "${{ steps.version.outputs.tag_name }}") {
          Write-Host "Tag ${{ steps.version.outputs.tag_name }} already exists, deleting..."
          git tag -d "${{ steps.version.outputs.tag_name }}"
          git push origin ":refs/tags/${{ steps.version.outputs.tag_name }}" 2>$null || Write-Host "Remote tag did not exist"
        }
        
        # Create new tag
        git add package.json
        git commit -m "chore: release v${{ steps.version.outputs.version }}" || Write-Host "No changes to commit"
        git tag -a "${{ steps.version.outputs.tag_name }}" -m "Release v${{ steps.version.outputs.version }}"
        git push origin "${{ steps.version.outputs.tag_name }}"
      shell: pwsh
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: "üéÆ New World Crafting Calculator v${{ steps.version.outputs.version }}"
        body: ${{ steps.release_notes.outputs.notes }}
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-v${{ steps.version.outputs.version }}
        path: release-assets/
        retention-days: 90
